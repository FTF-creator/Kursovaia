import tkinter as tk
from tkinter import messagebox
import os
import sys

class CardGameUI:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏–≥—Ä—ã"""
    
    def __init__(self, root, game_engine):
        self.root = root
        self.game_engine = game_engine
        self.card_widgets = []
        
        self._create_ui()
        self._update_display()
    
    def _create_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        top = tk.Frame(self.root, bg='#2E8B57', height=80)
        top.pack(fill=tk.X, padx=10, pady=5)
        
        self.status_label = tk.Label(top, text="üé¥ –î–£–†–ê–ö - –û–û–ü –ê–†–•–ò–¢–ï–ö–¢–£–†–ê", 
                                   font=('Arial', 14, 'bold'), bg='#2E8B57', fg='white')
        self.status_label.pack(pady=5)
        
        suit_symbols = {'hearts': '‚ô•', 'diamonds': '‚ô¶', 'clubs': '‚ô£', 'spades': '‚ô†'}
        trump_symbol = suit_symbols.get(self.game_engine.table.trump_suit, '?')
        self.trump_label = tk.Label(top, text=f"–ö–æ–∑—ã—Ä—å: {trump_symbol}", 
                                  font=('Arial', 12), bg='#2E8B57', fg='gold')
        self.trump_label.pack()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–∞—Ö
        self.info_label = tk.Label(top, text="", font=('Arial', 10), bg='#2E8B57', fg='white')
        self.info_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª
        middle = tk.Frame(self.root, bg='#2E8B57', height=400)
        middle.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Canvas –¥–ª—è —Å—Ç–æ–ª–∞ —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π
        self.table_canvas = tk.Canvas(middle, bg='#228B22', height=380, relief=tk.SUNKEN, borderwidth=2)
        self.table_canvas.pack(fill=tk.BOTH, expand=True)
        
        # –ö–∞—Ä—Ç—ã –±–æ—Ç–∞ (–≤–≤–µ—Ä—Ö—É)
        bot_frame = tk.Frame(self.root, bg='#2E8B57', height=100)
        bot_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(bot_frame, text="–ö–ê–†–¢–´ –ë–û–¢–ê:", font=('Arial', 14, 'bold'),
                bg='#2E8B57', fg='white').pack()
        
        self.bot_cards_frame = tk.Frame(bot_frame, bg='#2E8B57')
        self.bot_cards_frame.pack(pady=10)
        
        # –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ (–≤–Ω–∏–∑—É)
        player_frame = tk.Frame(self.root, bg='#2E8B57', height=100)
        player_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(player_frame, text="–í–ê–®–ò –ö–ê–†–¢–´:", font=('Arial', 14, 'bold'),
                bg='#2E8B57', fg='white').pack()
        
        self.player_cards_frame = tk.Frame(player_frame, bg='#2E8B57')
        self.player_cards_frame.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._create_control_buttons()
    
    def _create_control_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        controls = tk.Frame(self.root, bg='#2E8B57')
        controls.pack(fill=tk.X, padx=10, pady=10)

        self.take_btn = tk.Button(controls, text="–í–ó–Ø–¢–¨ –ö–ê–†–¢–´", command=self._take_cards,
                                font=('Arial', 12, 'bold'), state=tk.DISABLED, 
                                bg="#D7E60B", fg='white', width=15, height=2)
        self.take_btn.pack(side=tk.LEFT, padx=10)

        self.pass_btn = tk.Button(controls, text="–ü–†–û–ü–£–°–¢–ò–¢–¨", command=self._pass_turn,
                                font=('Arial', 12, 'bold'), state=tk.DISABLED,
                                bg='#45B7D1', fg='white', width=15, height=2)
        self.pass_btn.pack(side=tk.LEFT, padx=10)

        # –ö–Ω–æ–ø–∫–∞ –í–´–•–û–î –í –ú–ï–ù–Æ —Å–ø—Ä–∞–≤–∞
        self.menu_btn = tk.Button(controls, text="–í–´–•–û–î –í –ú–ï–ù–Æ", command=self._exit_to_menu,
                                font=('Arial', 12, 'bold'),
                                bg="#FF0000", fg='white', width=15, height=2)
        self.menu_btn.pack(side=tk.RIGHT, padx=10)
    
    def _update_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ä—Ç—ã
        for widget in self.card_widgets:
            widget.destroy()
        self.card_widgets = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –±–æ—Ç–∞ (—Ä—É–±–∞—à–∫–æ–π –≤–≤–µ—Ä—Ö)
        bot = self.game_engine.players[1]
        for card in bot.cards:
            self._create_card_widget(self.bot_cards_frame, card, is_human=False)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        human = self.game_engine.players[0]
        can_attack = (not self.game_engine.game_over and 
                     self.game_engine.current_attacker_index == 0)
        can_defend = (not self.game_engine.game_over and 
                     self.game_engine.current_defender_index == 0 and 
                     self.game_engine.table.attack_count > 0)
        
        for card in human.cards:
            self._create_card_widget(self.player_cards_frame, card, is_human=True,
                                   can_interact=can_attack or can_defend, card_obj=card)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª
        self._draw_table()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        attacker_name = self.game_engine.current_attacker.name
        defender_name = self.game_engine.current_defender.name
        self.status_label.config(text=f"üéØ –ê—Ç–∞–∫—É–µ—Ç: {attacker_name} | üõ°Ô∏è –ó–∞—â–∏—â–∞–µ—Ç—Å—è: {defender_name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö
        human_count = len(self.game_engine.players[0].cards)
        bot_count = len(self.game_engine.players[1].cards)
        deck_count = self.game_engine.deck.count
        discard_count = len(self.game_engine.discard_pile)
        self.info_label.config(text=f"üìä –ö–∞—Ä—Ç—ã: –í—ã ({human_count}) | –ë–æ—Ç ({bot_count}) | –ö–æ–ª–æ–¥–∞ ({deck_count}) | –û—Ç–±–æ–π ({discard_count})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if self.game_engine.check_win_condition():
            self._show_winner()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        self._update_buttons()
    
    def _create_card_widget(self, parent, card, is_human=True, can_interact=False, card_obj=None):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –∫–∞—Ä—Ç—ã"""
        card_width = self.game_engine.texture_loader.card_width
        card_height = self.game_engine.texture_loader.card_height
        
        card_frame = tk.Frame(parent, width=card_width, height=card_height,
                            relief=tk.RAISED, borderwidth=2, bg='white')
        card_frame.pack_propagate(False)
        card_frame.pack(side=tk.LEFT, padx=3)
        
        card_canvas = tk.Canvas(card_frame, width=card_width, height=card_height, 
                              bg='white', highlightthickness=0)
        card_canvas.pack(fill=tk.BOTH, expand=True)
        
        if is_human:
            # –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ - –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π
            texture = self.game_engine.texture_loader.get_card_texture(card)
            if texture:
                card_canvas.create_image(0, 0, image=texture, anchor=tk.NW)
                
                if card.is_trump:
                    card_canvas.create_rectangle(2, 2, card_width-2, card_height-2,
                                               outline='gold', width=3)
        else:
            # –ö–∞—Ä—Ç—ã –±–æ—Ç–∞ - —Ä—É–±–∞—à–∫–æ–π
            back_texture = self.game_engine.texture_loader.card_back_texture
            if back_texture:
                card_canvas.create_image(0, 0, image=back_texture, anchor=tk.NW)
        
        if can_interact and card_obj:
            card_canvas.bind('<Button-1>', lambda e, c=card_obj: self._on_card_click(c))
            card_canvas.bind('<Enter>', lambda e, f=card_frame: f.configure(bg='lightblue'))
            card_canvas.bind('<Leave>', lambda e, f=card_frame: f.configure(bg='white'))
            card_canvas.config(cursor="hand2")
        
        self.card_widgets.append(card_frame)
    
    def _draw_table(self):
        """–†–∏—Å—É–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª"""
        self.table_canvas.delete("all")
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Å—Ç–æ–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        table_texture = self.game_engine.texture_loader.table_texture
        if table_texture:
            self.table_canvas.create_image(0, 0, image=table_texture, anchor=tk.NW)
        
        # –†–∏—Å—É–µ–º –æ–±—â—É—é –∫–æ–ª–æ–¥—É —Å–ª–µ–≤–∞ —Å —Ä—É–±–∞—à–∫–æ–π
        if not self.game_engine.deck.is_empty:
            back_texture = self.game_engine.texture_loader.card_back_texture
            if back_texture:
                deck_x, deck_y = 50, 150
                self.table_canvas.create_image(deck_x, deck_y, image=back_texture, anchor=tk.NW)
                self.table_canvas.create_text(deck_x + 50, deck_y + 160,
                                            text=f"–ö–æ–ª–æ–¥–∞\n{self.game_engine.deck.count}", 
                                            font=('Arial', 12, 'bold'), 
                                            fill='white' if not table_texture else 'black',
                                            justify=tk.CENTER)
        
        # –†–∏—Å—É–µ–º –æ—Ç–±–æ–π —Å–ø—Ä–∞–≤–∞ —Å —Ä—É–±–∞—à–∫–æ–π
        if self.game_engine.discard_pile:
            back_texture = self.game_engine.texture_loader.card_back_texture
            if back_texture:
                discard_x, discard_y = 1000, 150
                self.table_canvas.create_image(discard_x, discard_y, image=back_texture, anchor=tk.NW)
                self.table_canvas.create_text(discard_x + 50, discard_y + 160,
                                            text=f"–û—Ç–±–æ–π\n{len(self.game_engine.discard_pile)}", 
                                            font=('Arial', 12, 'bold'),
                                            fill='white' if not table_texture else 'black',
                                            justify=tk.CENTER)
        
        # –†–∏—Å—É–µ–º –∫–æ–∑—ã—Ä—å
        trump_x, trump_y = 50, 50
        suit_symbols = {'hearts': '‚ô•', 'diamonds': '‚ô¶', 'clubs': '‚ô£', 'spades': '‚ô†'}
        symbol = suit_symbols.get(self.game_engine.table.trump_suit, '?')
        color = 'red' if self.game_engine.table.trump_suit in ['hearts', 'diamonds'] else 'white'
        self.table_canvas.create_text(trump_x, trump_y, text=f"–ö–æ–∑—ã—Ä—å: {symbol}", 
                                    font=('Arial', 14, 'bold'), 
                                    fill=color if not table_texture else 'black')
        
        # –†–∏—Å—É–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
        pairs = self.game_engine.table.get_attack_defense_pairs()
        if not pairs:
            if self.game_engine.deck.is_empty and not self.game_engine.discard_pile:
                self.table_canvas.create_text(600, 200, text="üé¥ –°—Ç–æ–ª –ø—É—Å—Ç", 
                                            font=('Arial', 16), 
                                            fill='white' if not table_texture else 'black')
            return
        
        # –†–∏—Å—É–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ –¥–ª—è –∞—Ç–∞–∫–∏/–∑–∞—â–∏—Ç—ã –ø–æ —Ü–µ–Ω—Ç—Ä—É
        x, y = 400, 150
        for attack_card, defense_card in pairs:
            # –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞
            attack_texture = self.game_engine.texture_loader.get_card_texture(attack_card)
            if attack_texture:
                self.table_canvas.create_image(x, y, image=attack_texture, anchor=tk.NW)
            
            # –ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
            if defense_card:
                defense_texture = self.game_engine.texture_loader.get_card_texture(defense_card)
                if defense_texture:
                    self.table_canvas.create_image(x+80, y, image=defense_texture, anchor=tk.NW)
            else:
                text_color = 'white' if not table_texture else 'black'
                self.table_canvas.create_text(x+40, y+120, text="‚ùå", 
                                            font=('Arial', 16), fill=text_color)
            
            x += 160
    
    def _on_card_click(self, card):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ –∏–≥—Ä–æ–∫–∞"""
        if self.game_engine.game_over:
            return
        
        human_player = self.game_engine.players[0]
        
        if self.game_engine.current_attacker_index == 0:  # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
            if self.game_engine.make_attack(0, card):
                self._update_display()
                self._start_ai_defense()
            else:
                messagebox.showinfo("–ù–µ–ª—å–∑—è –∞—Ç–∞–∫–æ–≤–∞—Ç—å", "–ù–µ–ª—å–∑—è –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É")
        
        elif self.game_engine.current_defender_index == 0:  # –ò–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –Ω–µ–æ—Ç–±–∏—Ç—É—é –∞—Ç–∞–∫—É
            unbeaten_attacks = self.game_engine.get_unbeaten_attacks()
            if unbeaten_attacks:
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —ç—Ç–æ–π –∞—Ç–∞–∫–∏
                pairs = self.game_engine.table.get_attack_defense_pairs()
                for i, (attack, defense) in enumerate(pairs):
                    if defense is None and attack == unbeaten_attacks[0]:
                        if self.game_engine.make_defense(0, card, i):
                            self._update_display()
                            if self.game_engine.table.is_all_beaten():
                                self.root.after(1000, self._beat_cards)
                            else:
                                self._start_ai_defense()
                        else:
                            messagebox.showwarning("–ù–µ–ª—å–∑—è –æ—Ç–±–∏—Ç—å—Å—è", "–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–±–∏—Ç—å –∞—Ç–∞–∫—É—é—â—É—é –∫–∞—Ä—Ç—É!")
                        break
    
    def _take_cards(self):
        """–ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã"""
        self.game_engine.take_cards(self.game_engine.current_defender_index)
        self._update_display()
        self._start_ai_attack()
    
    def _beat_cards(self):
        """–ö–∞—Ä—Ç—ã —É—Ö–æ–¥—è—Ç –≤ —Å–±—Ä–æ—Å"""
        self.game_engine.beat_cards()
        self._update_display()
        self._start_ai_attack()
    
    def _pass_turn(self):
        """–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã game_engine
        self.game_engine._next_turn_success()
        self.game_engine._replenish_cards()
        self._update_display()
        self._start_ai_attack()
    
    def _start_ai_attack(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥ AI –∞—Ç–∞–∫—É—é—â–µ–≥–æ"""
        if (not self.game_engine.game_over and 
            self.game_engine.current_attacker_index == 1):
            self.root.after(1000, self._ai_attack)
    
    def _start_ai_defense(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞—â–∏—Ç—É AI"""
        if (not self.game_engine.game_over and 
            self.game_engine.current_defender_index == 1):
            self.root.after(1000, self._ai_defend)
    
    def _ai_attack(self):
        """–•–æ–¥ AI –∞—Ç–∞–∫—É—é—â–µ–≥–æ"""
        if self.game_engine.game_over:
            return
        
        ai_player = self.game_engine.players[1]
        card = ai_player.make_move(self.game_engine)
        
        if card and self.game_engine.make_attack(1, card):
            self._update_display()
            # –ü–æ—Å–ª–µ –∞—Ç–∞–∫–∏ AI, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å
        else:
            # AI –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥
            self.game_engine._next_turn_success()
            self.game_engine._replenish_cards()
            self._update_display()
    
    def _ai_defend(self):
        """–ó–∞—â–∏—Ç–∞ AI"""
        if self.game_engine.game_over:
            return
        
        ai_player = self.game_engine.players[1]
        unbeaten_attacks = self.game_engine.get_unbeaten_attacks()
        
        if unbeaten_attacks:
            defense_card = ai_player.defend(unbeaten_attacks[0], self.game_engine)
            if defense_card:
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∞—Ç–∞–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã
                pairs = self.game_engine.table.get_attack_defense_pairs()
                for i, (attack, defense) in enumerate(pairs):
                    if defense is None and attack == unbeaten_attacks[0]:
                        self.game_engine.make_defense(1, defense_card, i)
                        self._update_display()
                        
                        if self.game_engine.table.is_all_beaten():
                            self.root.after(1000, self._beat_cards)
                        else:
                            self._start_ai_defense()
                        break
            else:
                # AI –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–±–∏—Ç—å—Å—è - –∑–∞–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã
                self.game_engine.take_cards(1)
                self._update_display()
                self._start_ai_attack()
    
    def _update_buttons(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"""
        self.take_btn.config(state=tk.DISABLED)
        self.pass_btn.config(state=tk.DISABLED)
        
        if self.game_engine.game_over:
            return
        
        # –ö–Ω–æ–ø–∫–∞ –í–ó–Ø–¢–¨ –ö–ê–†–¢–´ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
        if (self.game_engine.current_defender_index == 0 and 
            self.game_engine.table.attack_count > 0):
            self.take_btn.config(state=tk.NORMAL)
        
        # –ö–Ω–æ–ø–∫–∞ –ü–†–û–ü–£–°–¢–ò–¢–¨ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        if self.game_engine.current_attacker_index == 0:
            self.pass_btn.config(state=tk.NORMAL)
    
    def _show_winner(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        if self.game_engine.players[0].card_count == 0:
            messagebox.showinfo("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞", "üéâ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: –ò–≥—Ä–æ–∫! üéâ\n–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –° –ü–û–ë–ï–î–û–ô! üèÜ")
        else:
            messagebox.showinfo("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞", "üéâ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: –ë–æ—Ç! üéâ\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")
    
    def _exit_to_menu(self):
        """–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        if messagebox.askyesno("–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é?\n–¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞."):
            self.root.destroy()
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π menu.py –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                menu_path = os.path.join(os.path.dirname(__file__), "..", "menu.py")
                if not os.path.exists(menu_path):
                    print("‚ö†Ô∏è  –§–∞–π–ª menu.py –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é...")
                    self._create_simple_menu()
                import subprocess
                subprocess.run([sys.executable, "menu.py"])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—é: {e}")
    
    def _create_simple_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª –º–µ–Ω—é –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        menu_content = '''import tkinter as tk
from tkinter import messagebox
import subprocess
import sys

def main():
    root = tk.Tk()
    root.title("–ú–µ–Ω—é –∏–≥—Ä—ã")
    root.geometry("400x300")
    
    tk.Label(root, text="üé¥ –ö–ê–†–¢–û–ß–ù–´–ô –î–£–†–ê–ö", font=('Arial', 16)).pack(pady=20)
    
    def start_game():
        root.destroy()
        try:
            subprocess.run([sys.executable, "main.py"])
        except:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É")
    
    tk.Button(root, text="üéÆ –ù–ê–ß–ê–¢–¨ –ò–ì–†–£", command=start_game, 
              font=('Arial', 14), width=20, height=2).pack(pady=10)
    
    tk.Button(root, text="üö™ –í–´–•–û–î", command=root.quit,
              font=('Arial', 14), width=20, height=2).pack(pady=10)
    
    root.mainloop()

if __name__ == "__main__":
    main()
'''
        with open("menu.py", "w", encoding="utf-8") as f:
            f.write(menu_content)
        print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π menu.py —Å–æ–∑–¥–∞–Ω")